{
    "scope": "source.cfscript,source.mxunit",
    "completions":
    [
        { "trigger": "assert()", "contents": "assert(${1:expression}, '${2:why?}');"},
        { "trigger": "debug()", "contents": "debug(${1:stuff});"},
        { "trigger": "assertTrue()", "contents": "assertTrue(${1:expression}, '${2:why?}');"},
        { "trigger": "assertFalse()", "contents": "assertFalse(${1:expression}, '${2:why?}');"},
        { "trigger": "assertEquals()", "contents": "assertEquals(${1:expression}, ${2:expression}, '${3:why?}');"},
        { "trigger": "assertNotEquals()", "contents": "assertNotEquals(${1:expression}, ${2:expression}, '${3:why?}');"},
        { "trigger": "fail()", "contents": "fail(${1:message});"},
        { "trigger": "failNotEquals()", "contents": "failNotEquals(${1:expression}, ${2:expression}, '${3:why?}');"},
        { "trigger": "assertSame()", "contents": "assertSame(${1:obj}, ${2:obj}, '${3:why?}');"},
        { "trigger": "assertNotSame()", "contents": "assertNotSame(${1:obj}, ${2:obj}, '${3:why?}');"},
        { "trigger": "assertXPath()", "contents": "assertXPath*( ${1:xpath}, ${2:data}, ${3:text}, ${4:message});"},
        { "trigger": "assertIsXMLDoc()", "contents": "assertIsXMLDoc(${1:xml}, '${3:why?}');"},
        { "trigger": "assertIsTypeOf()", "contents": "assertIsTypeOf(${1:component}, ${2:type}, '${3:why?}');"},
        { "trigger": "assertIsArray()", "contents": "assertIsArray(${1:array}, '${2:why?}');"},
        { "trigger": "assertIsDefined()", "contents": "assertIsDefined(${1:variable}, '${2:why?}');"},
        { "trigger": "assertIsEmpty()", "contents": "assertIsEmpty(${1:collection}, '${2:why?}');"},
        { "trigger": "assertIsEmptyArray()", "contents": "assertIsEmptyArray(${1:array}, '${2:why?}');"},
        { "trigger": "assertIsEmptyQuery()", "contents": "assertIsEmptyQuery(${1:query}, '${2:why?}');"},
        { "trigger": "assertIsEmptyStruct()", "contents": "assertIsEmptyStruct(${1:struct}, '${2:why?}');"},
        { "trigger": "assertIsQuery()", "contents": "assertIsQuery(${1:query}, '${2:why?}');"},
        { "trigger": "assertIsStruct()", "contents": "assertIsStruct(${1:struct}, '${2:why?}');"},
        { "trigger": "setUp()", "contents": "function setUp(){\n  ${1:code}; \n}"},
        { "trigger": "tearDown()", "contents": "function tearDown(){\n  ${1:code}; \n}"},
        { "trigger": "beforeTests()", "contents": "function beforeTests(){\n  ${1:code}; \n}"},
        { "trigger": "afterTests()", "contents": "function afterTests(){\n  ${1:code}; \n}"},
        { "trigger": "makePublic()", "contents": "makePublic( ${1:component}, ${2:private method}, ${3:proxy} );"},
        { "trigger": "injectMethod()", "contents": "injectMethod( ${1:receiver}, ${2:giver}, ${3:function_name}, ${4:function_name_in_receiver} );"},
        { "trigger": "injectProperty()", "contents": "injectProperty( ${1:component}, ${2:variable name}, ${3:new value}, ${4:scope} );"},
        { "trigger": "mock()", "contents": "mock(${1:component},${2:typeSage});"},
        { "trigger": "returns()", "contents": "returns(${1:value});"},
        { "trigger": "throws()", "contents": "throws(${1:exeption});"},
        { "trigger": "verify()", "contents": "verify();"},
        { "trigger": "verifyTimes()", "contents": "verifyTimes(${1:number});"},
        { "trigger": "verifyAtLeast()", "contents": "verifyAtLeast(${1:number});"},
        { "trigger": "verifyAtMost()", "contents": "verifyAtMost(${1:number});"},
        { "trigger": "verifyOnce()", "contents": "verifyOnce();"},
        { "trigger": "verifyNever()", "contents": "verifyNever();"},
        { "trigger": "orderedExpectation()", "contents": "orderedExpectation( ${1:one_of_N_object_params});"},
        { "trigger": "@mxunit:expectedException", "contents": "@mxunit:expectedException ${1:exception(s)}"},
        { "trigger": "@mxunit:dataProvider", "contents": "@mxunit:dataProvider ${1:collection_name}"},
        { "trigger": "expectException()", "contents": "expectException(${1:exception_name});"}
  ]
}